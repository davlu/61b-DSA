All questions are optional, though try to answer at least 4. The main goal of this file is to get you thinking critically about your own work, but we will also use these self reflections at the end of the semester when we do our internal review of the course.

ArrayDeque:

Q: Give an example of at least one idea from the staff solution that would have made your solution better (if any).

A:  

Q: What's something you felt proud of in your code, if anything?

A: Used modular arithmetic in an efficient way.

Q: What's something that was particularly inelegant in your code, if anything?

A: ArrayDeque implementation had too many loops. Maybe could have used recursion.

Q: What did you learn by talking to your partner about writing ArrayDeque?

A: Could have refactored the code into smaller bits.

Q: What do you wish you would have known before writing ArrayDeque, if anything?

A: Modular arithmetic.

Q: If you wrote ArrayDeque again, what would you do differently, if anything?

A: I would use modular arithmetic more instead of just for a few of the methods.

-----

LinkedListDeque:

Q: Give an example of at least one idea from the staff solution that would have made your solution better (if any).

A: Using private static final. 

Q: What's something you felt proud of in your code, if anything?

A: I am proud of the fact that I tried to implement LLD without using an
if statement and instead relied solely on pointer manipulation.


Q: What's something that was particularly inelegant in your code, if anything?

A: How i used too many for loops.

Q: What did you learn by talking to your partner about writing LinkedListDeque?

A: It is often good to refactor code.	

Q: What do you wish you would have known before writing LinkedListDeque, if anything?

A: The idea of how emptyDeque worked.

Q: If you wrote LinkedListDeque again, what would you do differently, if anything?

A: I would probably do the same thing again. Satisfied with my implementation.

-----

Meta:

Q: Did you like this design review process? Anything we should do differently next time?

A: We need more of these in the future. 
